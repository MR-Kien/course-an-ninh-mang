import { useState, useEffect, useCallback } from "react";
import axios from "axios"; // Gi·∫£ s·ª≠ b·∫°n d√πng Axios; n·∫øu d√πng fetch, thay th·∫ø b·∫±ng fetch

// Base URL cho API (c√≥ th·ªÉ config t·ª´ env: process.env.REACT_APP_API_URL)
const API_BASE_URL = "https://course-an-ninh-mang-backend.vercel.app/api"; // Thay b·∫±ng URL backend c·ªßa b·∫°n

// Instance Axios v·ªõi config chung (th√™m auth n·∫øu c·∫ßn, v√≠ d·ª•: Bearer token)
const token = localStorage.getItem("access_token");
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  },
});

// Hook ch√≠nh
export const useCourseData = (courseId, lessonId) => {
  const [courseData, setCourseData] = useState(null);
  const [lessonData, setLessonData] = useState(null);
  const [selectedLessonId, setSelectedLessonId] = useState(lessonId || null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // üîπ H√†m l·∫•y n·ªôi dung b√†i h·ªçc (d√πng l·∫°i ƒë∆∞·ª£c khi click sidebar)
  const fetchLessonById = useCallback(async (lessonId) => {
    try {
      setLoading(true);
      const lessonResponse = await api.get(`/courses/${lessonId}/content`);
      setLessonData(lessonResponse.data);
      setSelectedLessonId(lessonId);
      console.log("üìó Lesson Data:", lessonResponse.data);
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i b√†i h·ªçc:", err);
      setError(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i n·ªôi dung b√†i h·ªçc");
      setLessonData(null);
    } finally {
      setLoading(false);
    }
  }, []);

  // üîπ G·ªçi API kh√≥a h·ªçc khi courseId thay ƒë·ªïi
  useEffect(() => {
    if (!courseId) {
      setError("Thi·∫øu ID kh√≥a h·ªçc");
      setLoading(false);
      return;
    }

    const fetchCourse = async () => {
      try {
        setLoading(true);
        setError(null);

        const courseResponse = await api.get(`/courses/${courseId}`);
        const course = courseResponse.data;
        setCourseData(course);
        console.log("üìò Course Data:", course);

        // N·∫øu ch∆∞a c√≥ lessonId => t·ª± ƒë·ªông l·∫•y b√†i ƒë·∫ßu ti√™n
        let initialLessonId =
          lessonId || (course.lessons?.length ? course.lessons[0].id : null);

        if (initialLessonId) {
          await fetchLessonById(initialLessonId);
        } else {
          setLessonData(null);
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi fetch d·ªØ li·ªáu kh√≥a h·ªçc:", err);
        setError(err.response?.data?.message || "L·ªói k·∫øt n·ªëi backend");
        setCourseData(null);
        setLessonData(null);
      } finally {
        setLoading(false);
      }
    };

    fetchCourse();
  }, [courseId, lessonId, fetchLessonById]);

  return {
    courseData,
    lessonData,
    loading,
    error,
    selectedLessonId,
    fetchLessonById, // üëà d√πng ƒë·ªÉ g·ªçi khi ch·ªçn b√†i h·ªçc m·ªõi
  };
};
